{"version":3,"sources":["logo.svg","components/object_detector/index.jsx","App.js","reportWebVitals.js","index.jsx"],"names":["ObjectDetectorContainer","styled","div","DetectorContainer","TargetImg","img","HiddenFileInput","input","SelectButton","button","TargetBox","x","y","width","height","classType","score","toFixed","ObjectDetector","props","fileInputRef","useRef","imageRef","useState","imgData","setImgData","predictions","setPredictions","isLoading","setLoading","isEmptyPredictions","length","normalizePredictions","imgSize","map","prediction","bbox","regX","regY","regWidth","regHeight","imgWidth","current","imgHeight","detectObjectsOnImage","imageElement","a","cocoSsd","model","detect","normalizedPredictions","console","log","readImage","file","Promise","rs","rj","fileReader","FileReader","onload","result","onerror","error","readAsDataURL","onSelectImage","e","target","files","document","createElement","src","ref","idx","class","type","onChange","onClick","click","AppContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49a7fcc5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport \"@tensorflow/tfjs-backend-cpu\";\r\n//import \"@tensorflow/tfjs-backend-webgl\";\r\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\r\n\r\nconst ObjectDetectorContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst DetectorContainer = styled.div`\r\n  min-width: 300px;\r\n  height: 600px;\r\n  border: 3px solid #fff;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n`;\r\n\r\nconst TargetImg = styled.img`\r\n  height: 100%;\r\n`;\r\n\r\nconst HiddenFileInput = styled.input`\r\n  display: none;\r\n`;\r\n\r\nconst SelectButton = styled.button`\r\n  padding: 7px 10px;\r\n  border: 2px solid transparent;\r\n  background-color: #fff;\r\n  color: #0a0f22;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  outline: none;\r\n  margin-top: 2em;\r\n  cursor: pointer;\r\n  transition: all 260ms ease-in-out;\r\n  &:hover {\r\n    background-color: transparent;\r\n    border: 2px solid #fff;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst TargetBox = styled.div`\r\n  position: absolute;\r\n  left: ${({ x }) => x + \"px\"};\r\n  top: ${({ y }) => y + \"px\"};\r\n  width: ${({ width }) => width + \"px\"};\r\n  height: ${({ height }) => height + \"px\"};\r\n  border: 4px solid #1ac71a;\r\n  background-color: transparent;\r\n  z-index: 20;\r\n  &::before {\r\n    content: \"${({ classType, score }) => `${classType} ${score.toFixed(1)}%`}\";\r\n    color: #1ac71a;\r\n    font-weight: 500;\r\n    font-size: 17px;\r\n    position: absolute;\r\n    top: -1.5em;\r\n    left: -5px;\r\n  }\r\n`;\r\n\r\nexport function ObjectDetector(props) {\r\n  const fileInputRef = useRef();\r\n  const imageRef = useRef();\r\n  const [imgData, setImgData] = useState(null);\r\n  const [predictions, setPredictions] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const isEmptyPredictions = !predictions || predictions.length === 0;\r\n\r\n  const openFilePicker = () => {\r\n    if (fileInputRef.current) fileInputRef.current.click();\r\n  };\r\n\r\n  const normalizePredictions = (predictions, imgSize) => {\r\n    if (!predictions || !imgSize || !imageRef) return predictions || [];\r\n    return predictions.map((prediction) => {\r\n      const { bbox } = prediction;\r\n      const regX = bbox[0];\r\n      const regY = bbox[1];\r\n      const regWidth = bbox[2];\r\n      const regHeight = bbox[3];\r\n\r\n      const imgWidth = imageRef.current.width;\r\n      const imgHeight = imageRef.current.height;\r\n\r\n      const x = (regX * imgWidth) / imgSize.width;\r\n      const y = (regY * imgHeight) / imgSize.height;\r\n      const width = (regWidth * imgWidth) / imgSize.width;\r\n      const height = (regHeight * imgHeight) / imgSize.height;\r\n\r\n      return { ...prediction, bbox: [x, y, width, height] };\r\n    });\r\n  };\r\n\r\n  const detectObjectsOnImage = async (imageElement, imgSize) => {\r\n    const model = await cocoSsd.load({});\r\n    const predictions = await model.detect(imageElement, 6);\r\n    const normalizedPredictions = normalizePredictions(predictions, imgSize);\r\n    setPredictions(normalizedPredictions);\r\n    console.log(\"Predictions: \", predictions);\r\n  };\r\n\r\n  const readImage = (file) => {\r\n    return new Promise((rs, rj) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.onload = () => rs(fileReader.result);\r\n      fileReader.onerror = () => rj(fileReader.error);\r\n      fileReader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const onSelectImage = async (e) => {\r\n    setPredictions([]);\r\n    setLoading(true);\r\n\r\n    const file = e.target.files[0];\r\n    const imgData = await readImage(file);\r\n    setImgData(imgData);\r\n\r\n    const imageElement = document.createElement(\"img\");\r\n    imageElement.src = imgData;\r\n\r\n    imageElement.onload = async () => {\r\n      const imgSize = {\r\n        width: imageElement.width,\r\n        height: imageElement.height,\r\n      };\r\n      await detectObjectsOnImage(imageElement, imgSize);\r\n      setLoading(false);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <ObjectDetectorContainer>\r\n      <DetectorContainer>\r\n        {imgData && <TargetImg src={imgData} ref={imageRef} />}\r\n        {!isEmptyPredictions &&\r\n          predictions.map((prediction, idx) => (\r\n            <TargetBox\r\n              key={idx}\r\n              x={prediction.bbox[0]}\r\n              y={prediction.bbox[1]}\r\n              width={prediction.bbox[2]}\r\n              height={prediction.bbox[3]}\r\n              classType={prediction.class}\r\n              score={prediction.score * 100}\r\n            />\r\n          ))}\r\n      </DetectorContainer>\r\n      <HiddenFileInput\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        onChange={onSelectImage}\r\n      />\r\n      <SelectButton onClick={openFilePicker}>\r\n        {isLoading ? \"Recognizing...\" : \"Select Image\"}\r\n      </SelectButton>\r\n    </ObjectDetectorContainer>\r\n  );\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport { ObjectDetector } from \"./components/object_detector\";\n\nconst AppContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: #1c2127;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n`;\n\nfunction App() {\n  return (\n    <AppContainer>\n      <ObjectDetector />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}